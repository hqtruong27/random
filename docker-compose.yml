services:
  
  genshin-impact:
    env_file: .env.production
    image: hqtruong27/genshinimpact.api:latest
    restart: always
    container_name: genshin-impact
    ports:
     - "8080"
     - "8081"
    build:
      context: .
      dockerfile: Microservices/Hoyoverse/GenshinImpact/GenshinImpact.Api/Dockerfile
    environment:
      - VIRTUAL_HOST=genshin-impact.localhost
    networks:
      - random
    depends_on:
      - mongodb

  hoyolab:
    env_file: .env.production
    image: hqtruong27/hoyolab.api:latest
    container_name: hoyolab
    restart: always
    ports:
      - "8080"
      - "8081"
    build:
      context: .
      dockerfile: Microservices/Hoyoverse/Hoyolab/Hoyolab.Api/Dockerfile
    environment:
      - VIRTUAL_HOST=hoyolab.localhost
    networks:
      - random
    depends_on:
      - mongodb
      
  spending:
    env_file: .env.production
    image: hqtruong27/spending.api:latest
    container_name: spending
    restart: always
    build:
      context: .
      dockerfile: Microservices/Spending/Spending.Api/Dockerfile
    environment:
      - VIRTUAL_HOST=spending.localhost
    networks:
      - random
    depends_on:
      - db
   
  discord:
    image: hqtruong27/discord.bot:latest
    restart: always
    container_name: discord
    env_file: .env.production
    build:
      context: .
      dockerfile: Microservices/Discord/Discord.Bot/Dockerfile
    depends_on:
      - spending
      - lavalink
    networks:
      - random

  db:
    image: postgres
    restart: always
    container_name: postgresql
    env_file: .env.production
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - random
  
  mongodb:
    image: mongo:latest
    restart: always
    container_name: mongodb
    ports:
      - 27017:27017
    env_file: .env.production
    volumes:
      - ./mongodb:/data/db
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
    networks:
      - random

  lavalink:
    # pin the image version to Lavalink v4
    image: ghcr.io/lavalink-devs/lavalink:4
    container_name: lavalink
    restart: unless-stopped
    environment:
      # set Java options here
      - _JAVA_OPTIONS=-Xmx6G
      # set lavalink server port
      - SERVER_PORT=2333
      # set password for lavalink
      - LAVALINK_SERVER_PASSWORD=youshallnotpass
    volumes:
      # mount application.yml from the same directory or use environment variables
      - ./lavalink/application.yml:/opt/Lavalink/application.yml
      # persist plugins between restarts, make sure to set the correct permissions (user: 322, group: 322)
      - ./lavalink/plugins/:/opt/Lavalink/plugins/
    networks:
      - random
    expose:
      # lavalink exposes port 2333 to connect to for other containers (this is for documentation purposes only)
      - 2333
    ports:
      # you only need this if you want to make your lavalink accessible from outside of containers
      - "2333:2333"
  caddy:
    image: caddy:latest
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile.json:/etc/caddy/Caddyfile.json
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - random

volumes:
  caddy_data:
  caddy_config:

networks:
  random:
    name: random
    driver: bridge
    ipam:
      driver: default
      #use IP windows for internal network, for wsl see README.md
      config:
        - subnet: 172.22.130.0/24